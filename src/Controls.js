// –§–∞–π–ª: ./src/Controls.js
export class Controls {
    constructor(gridManager) {
        this.gridManager = gridManager;
        this.modules = {}; // –•—Ä–∞–Ω–∏—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        this.currentModule = null; // –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å
        this.isRunning = false; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è
        this.setupStartMenu();
    }

    registerModule(module) {
        this.modules[module.name] = module;
        this.updateStartMenu(); // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
    }

    setupStartMenu() {
        const startMenuContainer = document.getElementById('game-buttons-container');
        startMenuContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

        for (const name in this.modules) {
            const module = this.modules[name];
            const button = document.createElement('button');
            button.className = 'game-button';
            button.innerHTML = `
                <div class="game-icon">${this.getGameIcon(name)}</div>
                <div class="game-info">
                    <h3>${name}</h3>
                    <p>${this.getGameDescription(name)}</p>
                </div>
            `;
            button.addEventListener('click', () => this.selectGame(module));
            startMenuContainer.appendChild(button);
        }
    }

    updateStartMenu() {
        this.setupStartMenu(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –º–µ–Ω—é
    }

    selectGame(module) {
        this.currentModule = module;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        this.currentModule.setup();

        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('start-menu').style.display = 'none';
        document.getElementById('game-controls').style.display = 'block';

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.setupGameControls();
    }

    setupGameControls() {
        const startStopButton = document.getElementById('start-stop-btn');
        const clearButton = document.getElementById('clear-btn');
        const backToMenuButton = document.getElementById('back-to-menu-btn');

        startStopButton.addEventListener('click', () => {
            if (this.isRunning) {
                this.currentModule.pause();
                startStopButton.textContent = '–°—Ç–∞—Ä—Ç';
            } else {
                this.currentModule.start();
                startStopButton.textContent = '–°—Ç–æ–ø';
            }
            this.isRunning = !this.isRunning;
        });

        clearButton.addEventListener('click', () => {
            this.currentModule.pause();
            this.currentModule.clear();
            startStopButton.textContent = '–°—Ç–∞—Ä—Ç';
            this.isRunning = false;
        });

        backToMenuButton.addEventListener('click', () => this.backToMainMenu());
    }

    backToMainMenu() {
        if (this.currentModule) {
            this.currentModule.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
            this.currentModule.clear(); // –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            this.currentModule.gridManager.selectedTiles = {};
            this.currentModule.gridManager.updateVisibleTiles();
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        document.getElementById('game-controls').style.display = 'none';
        document.getElementById('start-menu').style.display = 'block';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
        this.currentModule = null;
        this.isRunning = false;
    }

    getGameIcon(name) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –∏–≥—Ä—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∫–æ–Ω–∫–∏)
        switch (name) {
            case 'GameOfLife':
                return 'üéÆ';
            case 'PingPong':
                return 'üèì';
            default:
                return '‚ùì';
        }
    }

    getGameDescription(name) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
        switch (name) {
            case 'GameOfLife':
                return '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ "–ñ–∏–∑–Ω—å". –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —ç–≤–æ–ª—é—Ü–∏–µ–π –∫–ª–µ—Ç–æ–∫.';
            case 'PingPong':
                return '–ò–≥—Ä–∞ –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏ –ª–æ–≤–∏—Ç–µ –º—è—á.';
            default:
                return '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.';
        }
    }
}