// –§–∞–π–ª: ./game/Snake.js
import { BaseModule } from './BaseModule.js';

export class Snake extends BaseModule {
    constructor(gridManager) {
        super();
        this.gameIcon = 'üêç';
        this.gameDescription = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–º–µ–π–∫–∞. –°–æ–±–∏—Ä–∞–π—Ç–µ –µ–¥—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ—Å—å –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö!';
        this.name = 'Snake';
        this.gridManager = gridManager;
        this.isRunning = false;
        this.interval = null;
        this.speed = 200; // –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã (–º–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ)
        this.score = 0;
        this.fieldWidth = 0;
        this.fieldHeight = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.snake = []; // –ú–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–π–∫–∏
        this.direction = 'right'; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        this.food = { x: 0, y: 0 }; // –ü–æ–∑–∏—Ü–∏—è –µ–¥—ã
    }

    setup() {
        this.clear();
        this.initSnake(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–º–µ–π–∫–∏
        this.generateFood(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥—ã
        this.drawBorder();
        this.bindKeyboardEvents();
        this.drawScore();
    }

    start() {
        if (!this.isRunning) {
            this.isRunning = true;
            this.interval = setInterval(() => this.update(), this.speed);
        }
    }

    pause() {
        if (this.isRunning) {
            this.isRunning = false;
            clearInterval(this.interval);
        }
    }

    clear() {
        this.pause();
        this.score = 0;
        this.snake = [];
        this.direction = 'right';
        this.gridManager.selectedTiles = {};
        this.drawBorder();
        this.initSnake();
        this.generateFood();
        this.gridManager.updateVisibleTiles();
    }

    initSnake() {
        // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–º–µ–π–∫–∞ –∏–∑ 3 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        const startX = Math.floor(this.fieldWidth / 2);
        const startY = Math.floor(this.fieldHeight / 2);
        this.snake = [
            { x: startX, y: startY },
            { x: startX - 1, y: startY },
            { x: startX - 2, y: startY }
        ];
    }

    generateFood() {
        let foodX, foodY;
        do {
            foodX = Math.floor(Math.random() * this.fieldWidth);
            foodY = Math.floor(Math.random() * this.fieldHeight);
        } while (this.snake.some(segment => segment.x === foodX && segment.y === foodY));
        this.food = { x: foodX, y: foodY };
    }

    update() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∑–º–µ–π–∫–∏
        this.snake.forEach(segment => {
            const key = `${this.offsetX + segment.x},${this.offsetY + segment.y}`;
            delete this.gridManager.selectedTiles[key];
        });

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É
        const head = { ...this.snake[0] };
        switch (this.direction) {
            case 'up':
                head.y -= 1;
                break;
            case 'down':
                head.y += 1;
                break;
            case 'left':
                head.x -= 1;
                break;
            case 'right':
                head.x += 1;
                break;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        if (head.x < 0 || head.x >= this.fieldWidth || head.y < 0 || head.y >= this.fieldHeight ||
            this.snake.some(segment => segment.x === head.x && segment.y === head.y)) {
            this.pause();
            alert(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á—ë—Ç: ${this.score}`);
            this.clear();
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É
        this.snake.unshift(head);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—ä–µ–¥–∞–Ω–∏—è –µ–¥—ã
        if (head.x === this.food.x && head.y === this.food.y) {
            this.score += 10;
            this.generateFood();
        } else {
            // –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –µ–¥–∞ –Ω–µ —Å—ä–µ–¥–µ–Ω–∞
            this.snake.pop();
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–π–∫–∏
        this.snake.forEach((segment, index) => {
            const key = `${this.offsetX + segment.x},${this.offsetY + segment.y}`;
            this.gridManager.selectedTiles[key] = {
                type: 'snake',
                color: index === 0 ? '#00FF00' : '#00CC00' // –ì–æ–ª–æ–≤–∞ —è—Ä—á–µ
            };
        });

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –µ–¥—ã
        const foodKey = `${this.offsetX + this.food.x},${this.offsetY + this.food.y}`;
        this.gridManager.selectedTiles[foodKey] = { type: 'food', color: '#FF0000' };

        this.drawScore();
        this.gridManager.updateVisibleTiles();
    }

    drawBorder() {
        const visibleWidth = Math.ceil(this.gridManager.stage.width() / this.gridManager.totalSize);
        const visibleHeight = Math.ceil(this.gridManager.stage.height() / this.gridManager.totalSize);
        this.fieldWidth = Math.floor(visibleWidth * 0.9); // 90% —à–∏—Ä–∏–Ω—ã
        this.fieldHeight = Math.floor(visibleHeight * 0.8); // 80% –≤—ã—Å–æ—Ç—ã
        this.offsetX = Math.floor((visibleWidth - this.fieldWidth) / 2);
        this.offsetY = Math.floor((visibleHeight - this.fieldHeight) / 2);

        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
        for (let x = this.offsetX - 1; x < this.offsetX + this.fieldWidth + 1; x++) {
            for (let y = this.offsetY - 1; y < this.offsetY + this.fieldHeight + 1; y++) {
                const key = `${x},${y}`;
                if (x === this.offsetX - 1 || x === this.offsetX + this.fieldWidth ||
                    y === this.offsetY - 1 || y === this.offsetY + this.fieldHeight) {
                    this.gridManager.selectedTiles[key] = { type: 'wall', color: '#CCCCCC' };
                }
            }
        }
    }

    drawScore() {
        const scoreKey = `${this.offsetX + this.fieldWidth + 2},${this.offsetY + 1}`;
        this.gridManager.selectedTiles[scoreKey] = {
            type: 'text',
            text: `Score: ${this.score}`,
            color: '#FFFFFF'
        };
    }

    bindKeyboardEvents() {
        document.addEventListener('keydown', (e) => {
            if (!this.isRunning) return;

            switch (e.key) {
                case 'ArrowUp':
                    if (this.direction !== 'down') this.direction = 'up';
                    break;
                case 'ArrowDown':
                    if (this.direction !== 'up') this.direction = 'down';
                    break;
                case 'ArrowLeft':
                    if (this.direction !== 'right') this.direction = 'left';
                    break;
                case 'ArrowRight':
                    if (this.direction !== 'left') this.direction = 'right';
                    break;
            }
        });
    }

    handleLeftClick(x, y) {
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ó–º–µ–π–∫–µ
    }

    handleRightClick(x, y) {
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ó–º–µ–π–∫–µ
    }
}